syntax = "proto3";
package grid_manager_interface;

message ServerConfiguration {
  string server_address = 1;
}

message ServiceLibraryConfiguration {
  uint32 service_id = 1;
  uint32 service_version = 2;
}

message WorkerConfiguration {
  string server_address = 1;
  ServiceLibraryConfiguration service_library_configuration = 2;
}

// =====================================================================================================================

// Sent by a grid manager controller in order to distribute a service library.
message RequestAcceptServiceLibrary {
  uint32 client_id = 1;
  bytes service_library_data = 2;
  ServiceLibraryConfiguration service_library_configuration = 3;
}

message ResponseAcceptServiceLibrary {
  optional string error_message = 1;
}

// =====================================================================================================================

message ServerStatus {
  uint64 server_pid = 1;
  ServerConfiguration server_configuration = 2;
}

message WorkerStatus {
  uint64 worker_pid = 1;
  WorkerConfiguration worker_configuration = 2;
}

// Sent by a grid manager controller in order to get the status.
message RequestGetStatus {
  uint32 client_id = 1;
}

message ResponseGetStatus {
  repeated ServerStatus server_status = 1;
  repeated WorkerStatus worker_status = 2;
}

// =====================================================================================================================

// Sent by a grid manager controller in order to start a grid server with the given configuration.
message RequestServerStart {
  uint32 client_id = 1;
  ServerConfiguration server_configuration = 3;
}

message ResponseServerStart {
  optional string error_message = 1;
}

// =====================================================================================================================

// Sent by a grid manager controller in order to stop a grid server with the given process ID.
message RequestServerStop {
  uint32 client_id = 1;
  uint64 server_pid = 2;
}

message ResponseServerStop {
  optional string error_message = 1;
}

// =====================================================================================================================

// Sent by a grid manager controller in order to start a grid worker with the given configuration.
message RequestWorkerStart {
  uint32 client_id = 1;
  WorkerConfiguration worker_configuration = 3;
}

message ResponseWorkerStart {
  optional string error_message = 1;
}

// =====================================================================================================================

// Sent by a grid manager controller in order to stop the grid worker with the given process ID.
message RequestWorkerStop {
  uint32 client_id = 1;
  uint64 worker_pid = 2;
}

message ResponseWorkerStop {
  optional string error_message = 1;
}

// =====================================================================================================================

service GridManager {
  rpc AcceptServiceLibrary (RequestAcceptServiceLibrary) returns (ResponseAcceptServiceLibrary);
  rpc GetStatus (RequestGetStatus) returns (ResponseGetStatus);
  rpc StartServer (RequestServerStart) returns (ResponseServerStart);
  rpc StartWorker (RequestWorkerStart) returns (ResponseWorkerStart);
  rpc StopServer (RequestServerStop) returns (ResponseServerStop);
  rpc StopWorker (RequestWorkerStop) returns (ResponseWorkerStop);
}
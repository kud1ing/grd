syntax = "proto3";
package grid_manager_interface;

message ServerConfiguration {
  string server_address = 1;
}

message WorkerConfiguration {
  string server_address = 1;
  uint32 service_id = 2;
  string service_library_path = 3;
  uint32 service_version = 4;
}

// =====================================================================================================================

message ServerStatus {
  uint64 server_pid = 1;
  ServerConfiguration server_configuration = 2;
}

message WorkerStatus {
  uint64 worker_pid = 1;
  WorkerConfiguration worker_configuration = 2;
}

// Sent by a grid controller in order to get the status.
message RequestGetStatus {
  uint32 client_id = 1;
}

message ResponseGetStatus {
  repeated ServerStatus server_status = 1;
  repeated WorkerStatus worker_status = 2;
}

// =====================================================================================================================

// Sent by a grid controller in order to stop the worker with the given client ID.
message RequestServerStart {
  uint32 client_id = 1;
  ServerConfiguration server_configuration = 3;
}

message ResponseServerStart {
}

// =====================================================================================================================

// Sent by a grid controller in order to stop a server.
message RequestServerStop {
  uint32 client_id = 1;
  uint64 server_pid = 2;
}

message ResponseServerStop {
}

// =====================================================================================================================

// Sent by a grid controller in order to stop the worker with the given client ID.
message RequestWorkerStart {
  uint32 client_id = 1;
  WorkerConfiguration worker_configuration = 3;
}

message ResponseWorkerStart {
}

// =====================================================================================================================

// Sent by a grid controller in order to stop the worker with the given client ID.
message RequestWorkerStop {
  uint32 client_id = 1;
  uint64 worker_pid = 2;
}

message ResponseWorkerStop {
}

// =====================================================================================================================

service GridManager {
  rpc GetStatus (RequestGetStatus) returns (ResponseGetStatus);
  rpc StartServer (RequestServerStart) returns (ResponseServerStart);
  rpc StartWorker (RequestWorkerStart) returns (ResponseWorkerStart);
  rpc StopServer (RequestServerStop) returns (ResponseServerStop);
  rpc StopWorker (RequestWorkerStop) returns (ResponseWorkerStop);
}